#!/usr/bin/with-contenv sh

set -u # Treat unset variables as an error.
set -o pipefail

# Make sure we appear with a proper name under `ps`.
if [ ! -L "$0" ]; then
    SV_NAME="$(basename "$(pwd)")"
    ln -sf run "$SV_NAME"
    exec ./"$SV_NAME" "$@"
fi

# Set umask.
if [ "${UMASK:-UNSET}" != "UNSET" ]; then
    umask "$UMASK"
fi

log() {
    echo "[$(basename "$0")] $*"
}

log_makemkvcon() {
    if [ "${LAST_MSG:-UNSET}" != "$*" ]; then
        echo "[makemkvcon] $*"
        LAST_MSG="$*"
    fi
}

kill_makemkvcon() {
    PID="$(ps -o pid,args | grep "/opt/makemkv/bin/makemkvcon" | grep -vw grep | grep -vw guiserver | grep " mkv " | tr -s ' ' | cut -d' ' -f2)"
    if [ "${PID:-UNSET}" != "UNSET" ]; then
        kill -sigkill $PID
        wait $PID >/dev/null 2>&1
    fi
}

process_makemkvcon_output() {
    while read OUTPUT; do
        OUTPUT_TYPE="$(echo "$OUTPUT" | cut -d':' -f1)"
        if [ "$OUTPUT_TYPE" = "PRGT" ]; then
            log_makemkvcon "Current operation: $(echo "$OUTPUT" | cut -d',' -f3 | tr -d '"')"
        elif [ "$OUTPUT_TYPE" = "PRGC" ]; then
            log_makemkvcon "Current action: $(echo "$OUTPUT" | cut -d',' -f3 | tr -d '"')"
        elif [ "$OUTPUT_TYPE" = "PRGV" ]; then
            CUR="$(echo "$OUTPUT" | cut -d',' -f1 | cut -d':' -f2)"
            TOT="$(echo "$OUTPUT" | cut -d',' -f2)"
            MAX="$(echo "$OUTPUT" | cut -d',' -f3)"
            log_makemkvcon "Current progress - $(expr $CUR \* 100 / $MAX)%, Total process - $(expr $TOT \* 100 / $MAX)%"
        elif [ "$OUTPUT_TYPE" = "MSG" ]; then
            MSG_CODE="$(echo "$OUTPUT" | cut -d',' -f1 | cut -d':' -f2)"
            MSG_FLAGS="$(echo "$OUTPUT" | cut -d',' -f2)"

            # Display the raw message string suitable for output.
            log_makemkvcon "$(echo "$OUTPUT" | cut -d',' -f4 | tr -d '"')"

            # Special handling for some message codes.
            case $MSG_CODE in
                5037)
                    # MSG:5037,516,2,"Copy complete. 0 titles saved, 1 failed.","Copy complete. %1 titles saved, %2 failed.","0","1"
                    exit 1
                    ;;
                5038)
                    # MSG:5038,776,2,"The total size of all output files may reach as much as 2384 megabytes while there are only 10 megabytes free on the destination drive. Do you still want to continue?","The total size of all output files may reach as much as %1 megabytes while there are only %2 megabytes free on the destination drive. Do you still want to continue?","2384","10"
                    log "Terminating makemkvcon due to insufficient disk space..."
                    kill_makemkvcon
                    exit 1
                    ;;
            esac
        fi
    done
}

process_disc() {
    DRV_ID="$1"
    LABEL="${2:-DISC$DRV_ID}"
    IS_BD="${3:-0}"

    if [ -d "/output/$LABEL" ]; then
        OUTPUT_DIR="$(mktemp -d "/output/${LABEL}-XXXXXX")"
    else
        OUTPUT_DIR="/output/$LABEL"
        mkdir "$OUTPUT_DIR"
    fi

    chown "$USER_ID:$GROUP_ID" "$OUTPUT_DIR"

    MAKEMKV_COMMON_OPTS="-r --progress=-same"
    if [ "${AUTO_DISC_RIPPER_MIN_TITLE_LENGTH:-UNSET}" != "UNSET" ]; then
        MAKEMKV_COMMON_OPTS="$MAKEMKV_COMMON_OPTS --minlength=$AUTO_DISC_RIPPER_MIN_TITLE_LENGTH"
    fi

    if [ "$IS_BD" -eq 1 ] && [ "${AUTO_DISC_RIPPER_BD_MODE:-mkv}" = "backup" ]; then
        log "Backup mode enabled for Blu-ray disc."
        $MAKEMKV_CLI $MAKEMKV_COMMON_OPTS --decrypt backup disc:$DRV_ID "$OUTPUT_DIR" | process_makemkvcon_output
    else
        $MAKEMKV_CLI $MAKEMKV_COMMON_OPTS mkv disc:$DRV_ID all "$OUTPUT_DIR" | process_makemkvcon_output
    fi
}

# Disable service if not enabled.
if [ "${AUTO_DISC_RIPPER:-0}" -eq 0 ]; then
    echo "[services.d] automatic disc ripper: disabled."
    s6-svc -d /var/run/s6/services/autodiscripper
    exit 0
fi

log "starting..."

if [ "${MAKEMKV_OPTICAL_DRIVE_PRESENT:-0}" -eq 0 ]; then
    log "No usable optical drive available."
    log "Disabling service..."
    s6-svc -d /var/run/s6/services/autodiscripper
    exit 0
fi

if [ "${SUP_GROUP_IDS:-UNSET}" = "UNSET" ]; then
    MAKEMKV_CLI="env HOME=/config LD_PRELOAD=/opt/makemkv/lib/umask_wrapper.so $APP_NICE_CMD s6-applyuidgid -u $USER_ID -g $GROUP_ID /opt/makemkv/bin/makemkvcon"
else
    MAKEMKV_CLI="env HOME=/config LD_PRELOAD=/opt/makemkv/lib/umask_wrapper.so $APP_NICE_CMD s6-applyuidgid -u $USER_ID -g $GROUP_ID -G $SUP_GROUP_IDS /opt/makemkv/bin/makemkvcon"
fi
STATE_DIR="$(mktemp -d)"
FIRST_RUN=1

while true; do
    # Fetch information about optical drives.
    DRIVES_INFO="$(mktemp)"
    $MAKEMKV_CLI -r --cache=1 info disc:9999 | grep "^DRV:" > "$DRIVES_INFO" 2>&1

    # Loop through all drives.
    while read -r DRV; do
        # Extract needed fields.
        DRV_ID="$(echo "$DRV" | cut -d',' -f1 | cut -d':' -f2)"
        DRV_STATE="$(echo "$DRV" | cut -d',' -f2)"
        DRV_FLAGS="$(echo "$DRV" | cut -d',' -f4)"
        DRV_LABEL="$(echo "$DRV" | cut -d',' -f6 | tr -d '"')"
        DRV_DEV="$(echo "$DRV" | cut -d',' -f7 | tr -d '"')"

        # File to which latest info of current drive is saved.
        DRV_INFO_FILE="$STATE_DIR/d$DRV_ID"

        if [ "$DRV_STATE" -ne 2 ]; then
            # No disc, tray opened or not a valid drive.  Skip it.
            echo > "$DRV_INFO_FILE"
            continue
        elif [ "$DRV" = "$(test ! -f "$DRV_INFO_FILE" || cat "$DRV_INFO_FILE")" ]; then
            # Disc already processed.  Skip it.
            continue
        else
            log "Disc detected in drive $DRV_ID ($DRV_DEV): $DRV_LABEL."
            if [ "$DRV_FLAGS" -eq 0 ]; then
                # Not a DVD/BluRay video disc.
                log "Not backing up disc: Not a DVD or BluRay video disc."
            elif [ "$FIRST_RUN" -eq 1 ]; then
                log "Not backing up disc: Service first run.  Eject and re-insert the disc to rip it."
            else
                # Process disc.
                log "Starting disc rip..."
                process_disc "$DRV_ID" "$DRV_LABEL" "$(expr \( $DRV_FLAGS / 4 \) % 2)"
                if [ "$?" -eq 0 ]; then
                    log "Disc rip terminated successfully."
                else
                    log "Disc rip terminated with failure."
                fi
                if [ "${AUTO_DISC_RIPPER_EJECT:-0}" -eq 1 ]; then
                    log "Ejecting disc from drive $DRV_ID ($DRV_DEV)..."
                    eject "$DRV_DEV" > /dev/null 2>&1 || eject -s "$DRV_DEV" > /dev/null 2>&1
                    if [ "$?" -eq 0 ]; then
                        log "Disc ejected."
                    else
                        log "ERROR: Failed to eject drive $DRV_ID ($DRV_DEV)."
                    fi
                fi
            fi
            echo "$DRV" > "$DRV_INFO_FILE"
        fi
    done < "$DRIVES_INFO"
    rm "$DRIVES_INFO"
    [ "$FIRST_RUN" -eq 0 ] || log "Ready."
    FIRST_RUN=0
    sleep "${AUTO_DISC_RIPPER_INTERVAL:-5}"
done

rm -r "$STATE_DIR"

# vim: set ft=sh :
